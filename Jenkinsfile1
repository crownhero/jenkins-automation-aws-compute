pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()

    }

    // Define environment variables
    environment {
        AWS_DEFAULT_REGION = "eu-west-2"
        AWS_EB_APPLICATION_NAME = "App-waverlite-com-New"
        AWS_EB_ENVIRONMENT_NAME = "Appwaverlitecomnew-env"
        STAGING_INSTANCE_IP = "13.40.226.98"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the Git repository
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://waverlite: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@github.com/waverlite/Web.git']]])
            }
        }
        stage('Test') {
            steps {
                sh 'php -l index.php'
            }
        }


        stage('Build') {
            steps {
                // Check PHP syntax and create deployment directory
                //sh 'php -l index.php'
                script {
                    if (!fileExists('dist')) {
                        sh 'mkdir dist'
                    }
                }
                // Copy files to deployment directory and package the application
                sh 'rsync -av --exclude=Jenkinsfile  Jenkinsfile _app assets auth data images includes logs proxy public vendor .htaccess 404.php 504.php  composer.json composer.lock index.php dist/'
                sh 'tar -czvf app.tar.gz dist/'
            }
        }


        //stage('deploy to staging') {
            //steps{
                 //withCredentials([sshUserPrivateKey(credentialsId: 'a92e516c-1cc8-4951-8d9f-9ed13ec2fad6', keyFileVariable: '')]) {

                    //sh "sudo scp -v -o StrictHostKeyChecking=no -r . ubuntu@${STAGING_INSTANCE_IP}:/var/www/html"
                    //sh 'whoami'
                //}
                //sshagent(credentials: ['a92e516c-1cc8-4951-8d9f-9ed13ec2fad6'], ignoreMissing: true) {

                        //sh "sudo scp -v -o StrictHostKeyChecking=no -r assets ubuntu@${STAGING_INSTANCE_IP}:/var/www/html"

                //}
                //sshPublisher(
                    //continueOnError: false,
                    //failOnError: true,
                    //publishers: [
                       //sshPublisherDesc(
                          //configName: 'Staging server',
                          //verbose: true,
                          //transfers: [
                              //sshTransfer(
                                  //execCommand: 'cd /var/www/html/ && sudo rm -rf /var/www/html/* && sudo git clone https://waverlite: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@github.com/waverlite/console.git && sudo mv console/* .',
                                  //execTimeout: 120000,
                                  //flatten: false
                              //)
                          //]
                       //)
                    //]
                  //)


            //}
        //}


        //stage('Approve Production Deployment') {
            //steps {
                //timeout(time: 1, unit: 'MINUTES'){
                    //input (
                       //'Do you want to deploy to production?'
                    //)
                //}
            //}
        //}


        stage('Deploy') {
            steps {
                // Use AWS credentials to execute AWS CLI
                withEnv(['AWS_ACCESS_KEY_ID=AKIA5YYC7I', 'AWS_SECRET_ACCESS_KEY=uvevTMHUiegdoA14pDjawrI']) {
                      sh('''aws sts get-caller-identity
                             eb --version
                             eb use app-waverlite-com-prod-env
                             eb deploy''')

                //}
                }

                // Set AWS credentials as environment variables and deploy the application to Elastic Beanstalk
                //script {
                    //env.AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID}"
                    //env.AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY}"

                    //ebCreateApplication applicationName: env.AWS_EB_APPLICATION_NAME, description: "v-${env.BUILD_NUMBER}"
                    //ebDeploy(environmentName: env.AWS_EB_ENVIRONMENT_NAME, versionLabel: "v-${env.BUILD_NUMBER}")
                //}
            }
        }

    }

    //post {
        //failure {
            //echo "The deployment was not approved. Triggering a new build."
            //build job: "${JOB_NAME}", propagate: false, wait: true
        //}
    //}
}
