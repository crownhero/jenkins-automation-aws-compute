pipeline{
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()

    }
    environment{
        apiRegistry = "4567898456765.dkr.ecr.eu-west-2.amazonaws.com/api-svc"
        api_image_Registry = "https://4567898456765.dkr.ecr.eu-west-1.amazonaws.com"
        registryCredential = "ecr:eu-west-1:awscd"
        DOCKER_REGISTRY = "registryUrl"
        registryUrl = "https://4567898456765.dkr.ecr.eu-west-2.amazonaws.com/api"
        cluster = "api-cluster"
        service = "api-svc"
        DOCKER_IMAGE_NAME = "test_api"
        
        
    }
    
    
    stages{
        stage('fetch'){
            steps {
                script {
                    // Retrieving the Git access token from Jenkins credentials
                    withCredentials([string(credentialsId: 'git', variable: 'GIT_ACCESS_TOKEN')]) {
                        // Set the Git URL with the access token as part of the URL
                        def gitUrlWithToken = "https:/str:${GIT_ACCESS_TOKEN}@github.com/str/Core.git"
        
                        // Checkout code from the Git repository
                        checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: gitUrlWithToken]]])
                    }
                }
             }
        
        }
        
        stage('test'){
            steps{
                sh '''
                    find . -name "*.php" -print0 | while IFS= read -r -d '' file; do
                        php -l "$file"
                    done
                   
                '''
            }
        } 
        
        stage('build api image'){
            steps{
                    
                sh 'docker build --no-cache --tag test_apis:latest .'
                sh 'docker tag test_apis:latest 4567898456765.dkr.ecr.eu-west-2.amazonaws.com/api:latest'
                
              
           }
        }
        
        stage('upload image to Amazon ECR') {
            steps {
                //sh 'aws --profile myawswaverliteprofile sts get-caller-identity'
                sh 'aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 4567898456765.dkr.ecr.eu-west-2.amazonaws.com > /dev/null'
                sh 'docker push 4567898456765.dkr.ecr.eu-west-2.amazonaws.com/api:latest'
                
            }
        }

        stage('Delete api-core image') {
            steps {
                sh 'docker rmi -f 4567898456765.dkr.ecr.eu-west-2.amazonaws.com/api:latest'
                sh 'docker rmi -f test_apis:latest'
            }
        }

        

        
       
        stage('deploy to Amazon ECS') {
            steps {
                //sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
            //}
           
                   //sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                sh 'aws --profile awsjenkinsprofile ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                
                 
                
            }
             
             
        }
                
    }
}
